{
  "$schema": "https://json.schemastore.org/eslintrc",
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint",
    "unused-imports"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended"
  ],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "rules": {
    // Prettier configuration moved here
    "prettier/prettier": [
      "error",
      {
        "printWidth": 100,
        "tabWidth": 2,
        "useTabs": false,
        "semi": true,
        "singleQuote": true,
        "jsxSingleQuote": false,
        "trailingComma": "all",
        "bracketSpacing": true,
        "bracketSameLine": false,
        "arrowParens": "always",
        "proseWrap": "always",
        "htmlWhitespaceSensitivity": "css",
        "endOfLine": "auto",
        "quoteProps": "as-needed",
        "plugins": [
          "prettier-plugin-organize-imports"
        ]
      }
    ],
    // Existing ESLint rules
    "react/prop-types": "off",
    "@typescript-eslint/no-unused-vars": "off",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/no-misused-promises": "error",
    "@typescript-eslint/require-await": "warn",
    "no-constant-condition": [
      "error",
      {
        "checkLoops": false
      }
    ],
    "prefer-const": "error",
    "no-duplicate-imports": "error",
    "eqeqeq": [
      "error",
      "smart"
    ],
    "curly": "error",
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      },
      {
        "blankLine": "always",
        "prev": [
          "const",
          "let",
          "var"
        ],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": [
          "const",
          "let",
          "var"
        ],
        "next": [
          "const",
          "let",
          "var"
        ]
      }
    ]
  },
  "overrides": [
    // TypeScript overrides
    {
      "files": [
        "*.ts",
        "*.tsx"
      ],
      "extends": [
        "plugin:@typescript-eslint/recommended-requiring-type-checking"
      ],
      "parserOptions": {
        "project": [
          "./tsconfig.json"
        ]
      }
    },
    // Test files overrides
    {
      "files": [
        "*.test.*",
        "**/__tests__/**"
      ],
      "rules": {
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/unbound-method": "off",
        // Prettier overrides for tests
        "prettier/prettier": [
          "error",
          {
            "printWidth": 100,
            "proseWrap": "preserve"
          }
        ]
      }
    },
    // JavaScript/CJS files
    {
      "files": [
        "*.js",
        "*.cjs"
      ],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    },
    // Astro files
    {
      "files": [
        "*.astro"
      ],
      "parser": "astro-eslint-parser",
      "parserOptions": {
        "parser": "@typescript-eslint/parser",
        "extraFileExtensions": [
          ".astro"
        ]
      },
      "rules": {
        "prettier/prettier": [
          "error",
          {
            "parser": "astro",
            "printWidth": 100
          }
        ]
      }
    },
    // Markdown/MDX files
    {
      "files": [
        "*.md",
        "*.mdx"
      ],
      "rules": {
        "prettier/prettier": [
          "error",
          {
            "proseWrap": "preserve",
            "printWidth": 120
          }
        ]
      }
    },
    // YAML files
    {
      "files": [
        "*.yaml",
        "*.yml"
      ],
      "rules": {
        "prettier/prettier": [
          "error",
          {
            "singleQuote": false,
            "tabWidth": 2
          }
        ]
      }
    },
    // JSON files
    {
      "files": [
        "*.json",
        "*.json5",
        "*.jsonc"
      ],
      "rules": {
        "prettier/prettier": [
          "error",
          {
            "tabWidth": 2,
            "parser": "json-stringify"
          }
        ]
      }
    }
  ]
}